<?

$model = User::where('votes', '>', 100)->firstOrFail();

$users = User::where('votes', '>', 100)->take(10)->get();

DB::table('users')->get();

DB::table("users")->where('age','>',20)->first() //retrieve single row

DB::table("users")->where('age','>',20)->value("name") //retrieve only one value instead of row

//chunking result from table
DB::table('users')->chunk(100, function($users) {
    foreach ($users as $user) {
        //
    }
});

//retrieving list of Column Values
$titles = DB::table('roles')->pluck('title');
foreach ($titles as $title) {
    echo $title;
}

//You may also specify a custom key column for the returned array:
$roles = DB::table('roles')->pluck('title', 'name');
foreach ($roles as $name => $title) {
    echo $title;
}

//aggregates
DB::table("users")->count();
DB::table("users")->max("price")
DB::table("users")->where('finalized',20)->avg('price')

//select
DB::table("users")->select('name','email as user_email')->get()

//distinct
DB::table('users')->distinct()->get()

//addSelect
$query = DB::table('users')->select('name');
$users = $query->addSelect('age')->get();

//Raw Expression
$users = DB::table('users')
            ->select(DB::raw('count(*) as user_count, status'))
            ->where('status', '<>', 1)
            ->groupBy('status')
            ->get();

//Inner Join

$users = DB::table('users')
	        ->join('contacts', 'users.id', '=', 'contacts.user_id')
	        ->join('orders', 'users.id', '=', 'orders.user_id')
	        ->select('users.*', 'contacts.phone', 'orders.price')
	        ->get();        
	        
//Left Join
$users = DB::table('users')
            ->leftJoin('posts', 'users.id', '=', 'posts.user_id')
            ->get();

//Advanced Join
DB::table('users')
        ->join('contacts', function ($join) {
            	$join->on('users.id', '=', 'contacts.user_id')
            		 ->orOn(...);
        	})

DB::table('users')
        ->join('contacts', function ($join) {
            $join->on('users.id', '=', 'contacts.user_id')
                 ->where('contacts.user_id', '>', 5);
        })
        ->get();

//Unions
$first = DB::table('users')
            ->whereNull('first_name');
$users = DB::table('users')
            ->whereNull('last_name')
            ->union($first)
            ->get();
        ->get();            	      

//Where 
$users = DB::table('users')
                ->where('votes', '>=', 100)
                ->get();

$users = DB::table('users')
                ->where('votes', '<>', 100)
                ->get();

$users = DB::table('users')
                ->where('name', 'like', 'T%')
                ->get();     

$users = DB::table('users')->where([
			['status','1'],
			['subscribed','<>','1'],
		])->get();         
		
//Or statement
$users = DB::table('users')
            ->where('votes', '>', 100)
            ->orWhere('name', 'John')
            ->get();

//where between
$users = DB::table('users')
			->whereBetween('votes', [1, 100])->get();      

$users = DB::table('users')
            ->whereNotBetween('votes', [1, 100])
            ->get();

$users = DB::table('users')
            ->whereIn('id', [1, 2, 3])
            ->get();

$users = DB::table('users')
            ->whereNotIn('id', [1, 2, 3])
            ->get();                        			

$users = DB::table('users')
            ->whereNull('updated_at')
            ->get(); 
            
$users = DB::table('users')
            ->whereNotNull('updated_at')
            ->get();  

//Advanced Where 
DB::table('users')
            ->where('name', '=', 'John')
            ->orWhere(function ($query) {
                $query->where('votes', '>', 100)
                      ->where('title', '<>', 'Admin');
            })
            ->get(); //select * from users where name = 'John' or (votes > 100 and title <> 'Admin')

//Exist statement
DB::table('users')
            ->whereExists(function ($query) {
                $query->select(DB::raw(1))
                      ->from('orders')
                      ->whereRaw('orders.user_id = users.id');
            })
            ->get();
/*select * from users
where exists (
    select 1 from orders where orders.user_id = users.id
)*/                        

//Order by
$users = DB::table('users')
            ->orderBy('name', 'desc')
            ->get();

//Group by
$users = DB::table('users')
            ->groupBy('account_id')
            ->having('account_id', '>', 100)
            ->get();

$users = DB::table('orders')
            ->select('department', DB::raw('SUM(price) as total_sales'))
            ->groupBy('department')
            ->havingRaw('SUM(price) > 2500')
            ->get();

//Skip
$users = DB::table('users')->skip(10)->take(5)->get();                                    

//Insert
DB::table('users')->insert(
    ['email' => 'john@example.com', 'votes' => 0]
);

//You may even insert several records into the table with a single call to insert by passing an array of arrays. Each array represents a row to be inserted into the table:

DB::table('users')->insert([
    ['email' => 'taylor@example.com', 'votes' => 0],
    ['email' => 'dayle@example.com', 'votes' => 0]
]);

//auto increment id
$id = DB::table('users')->insertGetId(
    ['email' => 'john@example.com', 'votes' => 0]
);

//Update
DB::table('users')
    ->where('id', 1)
    ->update(['votes' => 1]);

//Increment Decrement
DB::table('users')->increment('votes');

DB::table('users')->increment('votes', 5);

DB::table('users')->decrement('votes');

DB::table('users')->decrement('votes', 5);

//You may also specify additional columns to update during the operation:
DB::table('users')->increment('votes', 1, ['name' => 'John']);   

//Delete
DB::table('users')->delete();
DB::table('users')->where('votes', '<', 100)->delete();

//Pessimistic Locking
	//The query builder also includes a few functions to help you do "pessimistic locking" on your select statements. To run the statement with a "shared lock", you may use the sharedLock method on a query. A shared lock prevents the selected rows from being modified until your transaction commits:
DB::table('users')->where('votes', '>', 100)->sharedLock()->get();
	//Alternatively, you may use the lockForUpdate method. A "for update" lock prevents the rows from being modified or from being selected with another shared lock:
DB::table('users')->where('votes', '>', 100)->lockForUpdate()->get();


======================================
query builder aggregate functions.
$users = User::whereRaw('age > ? and votes = 100', array(25))->get();

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
DB::select('select * from users where active = ?', [1]);

DB::select('select * from users where id = :id', ['id' => 1]); //using naming binding

DB::insert('insert into users (id, name) values (?, ?)', [1, 'Dayle']);

DB::update('update users set votes = 100 where name = ?', ['John']);

DB::delete('delete from users');

DB::statement('drop table users');


/*To run a set of operations within a database transaction, you may use the transaction method on the DB facade. If an exception is thrown within the transaction Closure, the transaction will automatically be rolled back. If the Closure executes successfully, the transaction will automatically be committed. You don't need to worry about manually rolling back or committing while using the transaction method:*/
DB::transaction(function () {
    DB::table('users')->update(['votes' => 1]);
    DB::table('posts')->delete();
});

/*Manually Using Transactions
	If you would like to begin a transaction manually and have complete control over rollbacks and commits, you may use the beginTransaction method on the DB facade:*/
DB::beginTransaction();
	/*You can rollback the transaction via the rollBack method:*/
DB::rollBack();
	/*Lastly, you can commit a transaction via the commit method:*/
DB::commit();



